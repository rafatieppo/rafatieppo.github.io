<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Rafael Tieppo</title>
    <link>/post/</link>
    <description>Recent content in Posts on Rafael Tieppo</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 13 Mar 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>lucyLattes um script para manipular dados da plataforma Lattes</title>
      <link>/post/2019_03_13_lucylattes/</link>
      <pubDate>Wed, 13 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019_03_13_lucylattes/</guid>
      <description>Introdução Historicamente o CNPq gerencia uma base dados sobre pesquisadores em C&amp;amp;T para diversos fins, cita-se como exemplo a avaliação de programas de pós-graduação, seleção de bolsas para pesquisadores, entre outros. Esta base dados é denominada Plataforma Lattes.
Devido esta referida plataforma ser amplamente utilizada, tornou-se padrão em universidades, órgãos de pesquisa, etc. Nesta plataforma é possível encontrar desde a formação acadêmica do profissional, as empresas que trabalhou, até sua produção científica, e artística, etc.</description>
    </item>
    
    <item>
      <title>Python beginner tips</title>
      <link>/post/2018_12_16_pythontips/</link>
      <pubDate>Sun, 16 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018_12_16_pythontips/</guid>
      <description>Introduction I spent around 4 years working with R, and I can say that R is amazing. However, I decided to start a new stage in my professional life, and a need came, a multi proposal language. My option was Python, because It provides have data science tools, and has a huge support for others applications.
After some months, studying in my free time, I would like to share some code that I learned (from several sources).</description>
    </item>
    
    <item>
      <title>Julian date with python 3</title>
      <link>/post/2018_12_01_juliandate/</link>
      <pubDate>Sat, 01 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018_12_01_juliandate/</guid>
      <description>Introduction The work in data science must be tidy. A simple file name can help you to save a lot of time. For instance, if you have a series of satellite images from LANDSAT 8, the files are ordered by Julian date:
rt@rt-d5567:~/Documents/$ find -name &#39;*305*.TIF&#39; ./LO82280702018305CUB00_B3.TIF ./LO82280702018305CUB00_B9.TIF ./LO82280702018305CUB00_B5.TIF  If you did not realize, note that after 2018 there are three numbers 305. The number 305 means the 305th day of the year.</description>
    </item>
    
    <item>
      <title>Histogram and Barplot with Python</title>
      <link>/post/2018_11_26_barhistpy/</link>
      <pubDate>Mon, 26 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018_11_26_barhistpy/</guid>
      <description>Introduction Some people make a small confusion with histogram and barplots. So in this post we intend to provide some points about both of them.
Let&amp;rsquo;s supose that we have a sample from 200 persons, and we need to check the age distribution, so we can produce a histogram (Figure 1).
# creating data DF = pd.DataFrame({&amp;#34;A&amp;#34; : np.random.normal(30, 0.75, 200)}) # plot plt.figure(figsize=(8, 5)) plt.hist(DF[&amp;#34;A&amp;#34;], bins = 10, color=&amp;#39;steelblue&amp;#39;, alpha = 0.</description>
    </item>
    
    <item>
      <title>Inverse Distance Weighting (IDW) Interpolation</title>
      <link>/post/2018_07_27_idw2pyr/</link>
      <pubDate>Fri, 27 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018_07_27_idw2pyr/</guid>
      <description>Introduction If you want to predict the amount of rainfall, yield crops, or other attribute , you may need to learn about the interpolation methods like inverse distance weighted (IDW).
IDW is a deterministic method for interpolation, once you have a set of know points, you can use IDW to estimate values for unknown points. For instance, you have 6 know points with rainfall attribute, and you need to predict the rainfall for a 7th point (Figure 1).</description>
    </item>
    
    <item>
      <title>Planning all your projects with EMACS</title>
      <link>/post/2018_04_29_emacs_orgplan/</link>
      <pubDate>Sun, 29 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018_04_29_emacs_orgplan/</guid>
      <description>Introduction Every day I open EMACS to check my tasks and my schedule. Once I was wondering, why not plan and control my research projects. I checked some sites site 1, site 2, and site 3 and it was piece of cake. I split in 4 steps.
Step 1 - prepare your org file Prepare a .org file like this:
* PROJECTS :PROPERTIES: :COLUMNS: %6TYPE %20ITEM %OWNER %13DEADLINE :TYPE_ALL: Proj Action :OWNER_ALL: Person1 Person2 :Approved_ALL: &amp;quot;[ ]&amp;quot; &amp;quot;[X]&amp;quot; :DONE_ALL: Yes Nop :END: ** PROJECT 1 :PROPERTIES: :TYPE: Pesq :END: *** TODO Action 1 [33%] :PROPERTIES: :OWNER: Person1 :DEADLINE: &amp;lt;2018-05-20 Fri&amp;gt; :DONE: Nop :END: - [X] Version 1 - [ ] Version 2 *** TODO Action 2 [33%] :PROPERTIES: :OWNER: Person2 :DEADLINE: &amp;lt;2018-07-20 Fri&amp;gt; :DONE: Nop :END: - [X] Version 1 - [ ] Version 2  Step 2 - Almost there Once your file is done, you can check it in column-view, just press C-c C-x C-c on PROJECT1.</description>
    </item>
    
    <item>
      <title>Integrating emacs org-mode and google calendar</title>
      <link>/post/2018_02_20_emacs_googlecal/</link>
      <pubDate>Tue, 20 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018_02_20_emacs_googlecal/</guid>
      <description>I am an EMACS user and consequently I use the amazing Org mode to plan my schedule and to manage my projects. However I was boring about how I synchronized the .ics file from EMACS and my Google calendar. I spent some minutes in my Google calendar to clear the appointments, and import a new file. So, a while ago I improved my routine. I did know nothing about it.</description>
    </item>
    
    <item>
      <title>Converter lista com data.frame(s) em um data.frame</title>
      <link>/post/170510_bind_rows/</link>
      <pubDate>Wed, 10 May 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/170510_bind_rows/</guid>
      <description>Introdução Trabalhando com banco de dados, em algum momento torna-se necessária a extração de determininados elementos que satisfaçam um dada condição. Na linguagem R, uma das opções de se realizar esta operação é a utilização de listas.
Estudo de caso Vamos supor que você tenha um data.frame com três tratamentos e quatro repetições
DF &amp;lt;- data.frame(BLOCO = rep(seq(1,4), each = 12), TRAT=rep(c(&amp;quot;T1&amp;quot;, &amp;quot;T2&amp;quot;, &amp;quot;T3&amp;quot;), each = 4), REP = seq(1,4), Z = rnorm(48, 30, 2.</description>
    </item>
    
    <item>
      <title>Reading and storing several files using R</title>
      <link>/post/2017_05_08_reading_several_files/</link>
      <pubDate>Mon, 08 May 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017_05_08_reading_several_files/</guid>
      <description>Introduction Usually we need to read several files to create a data bank (data frame with all data). If you have two or three files it is simple. However, if you have five or more files like .csv, .dat, etc, it can demand more time. Using R, one of the options to solve it is the list object, we will show how to handle with.
Case I - reading several files Supposing you have some .</description>
    </item>
    
    <item>
      <title>Lendo e armazenando uma série de arquivos</title>
      <link>/post/170514_reading_files/</link>
      <pubDate>Tue, 02 May 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/170514_reading_files/</guid>
      <description>Introdução Com frequência há necessidade de acessarmos uma série arquivos para gerar um banco de dados. Quando se tem dois ou três arquivos, pode-se dizer que escrever algumas linhas não demora. Contudo, quando se tem mais de três arquivos, seja ele .csv, .dat, etc., gasta-se tempo que poderia ser investido em outra ação. Na linguagem R, uma das opções de se realizar esta operação é a utilização de listas.</description>
    </item>
    
    <item>
      <title>Ordenar dados INMET</title>
      <link>/post/141211_inmetdataorder/</link>
      <pubDate>Thu, 11 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>/post/141211_inmetdataorder/</guid>
      <description>Introdução Em algum momento da graduação ou pós-graduação, você já trabalhou com séries históricas de clima. No seu estudo, provavelmente você se deparou com o desafio de organizar e analisar, arquivos que comumente atingem 10000 linhas.
Uma das fontes mais comuns para obtenção de dados climáticos é o INMET. Contudo, os arquivos que são obtidos pelo site do INMET, não possuem uma formatação das mais práticas (Figura 1).
Repare que para cada dia registrado duas linhas são ocupadas.</description>
    </item>
    
  </channel>
</rss>