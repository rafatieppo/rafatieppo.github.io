<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gdal on Rafael Tieppo</title>
    <link>/tags/gdal/</link>
    <description>Recent content in gdal on Rafael Tieppo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2021 &lt;a href=&#39;http://creativecommons.org/licenses/by-nc-sa/4.0/&#39;&gt;Licensed CC:By-NC-SA&lt;/a&gt;</copyright>
    <lastBuildDate>Thu, 26 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="/tags/gdal/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The power of GDAL and OGR</title>
      <link>/post/2021_08_26_powergdalogr_m03/</link>
      <pubDate>Thu, 26 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021_08_26_powergdalogr_m03/</guid>
      <description>Módulo 03 Introdução Uma dos métodos para conversão dos arquivos vetoriais para outros formatos é utilizar o ogr2ogr. O referido programa é uma ferramenta em linha de comando (CLI) que acompanha o GDAL (Geospatial Data Abstraction Library). Como trata-se de um recurso de linha de comando é possível utilizá-lo diretamente via terminal. Todavia, prefiro fazer um &amp;ldquo;intermédio&amp;rdquo; via script Python. Salienta-se que é possível reaproveitar (adaptar) os códigos apresentados aqui para usar diretamente no terminal.</description>
    </item>
    
    <item>
      <title>The power of GDAL and OGR</title>
      <link>/post/2021_08_25_powergdalogr_m02/</link>
      <pubDate>Wed, 25 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021_08_25_powergdalogr_m02/</guid>
      <description>Módulo 02 Objetivo A partir de um arquivo vetorial (shape), realizar a reprojeção para outro CRS (DATUM).
Leitura de arquivo (shape) e reprojeção Importação dos pacotes Inicialmente importar os pacotes
from osgeo import ogr, osr, gdal Leitura do arquivo vetorial Para abrir o arquivo vetorial, define-se o caminho e o parâmetro 0 ou 1:
# reading shape shapePath = &amp;#39;./shape/mt_municipios_2020.shp&amp;#39; ds = ogr.Open(shapePath, 1) # 0 means read-only. 1 means writeable # Check to see if shapefile was found.</description>
    </item>
    
    <item>
      <title>The power of GDAL and OGR</title>
      <link>/post/2021_08_24_powergdalogr_m01/</link>
      <pubDate>Tue, 24 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021_08_24_powergdalogr_m01/</guid>
      <description>Módulo 01 Objetivo Ler, editar e gravar arquivo vetorial (shape).
Material e métodos  Linux Debian Buster GDAL 2.4.0, released 2018/12/14  Na manipulação e processamento de aquivo vetorial, utilizaremos um arquivo shape com os municípios do estado de MT (Figura 1).
  Figura 1: Arquivo shape do estado de MT com Tabela de Atributos   Leitura e gravação de arquivo vetorial (shape) Importação dos pacotes Inicialmente importar os pacotes</description>
    </item>
    
    <item>
      <title>The power of GDAL and OGR</title>
      <link>/post/2021_08_20_powergdalogr_m00/</link>
      <pubDate>Fri, 20 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021_08_20_powergdalogr_m00/</guid>
      <description>Módulo 00 Introdução GDAL é um biblioteca licenciada pela OSGeo (Open Source Geospatial Foundation), desenvolvida em C++, que permite manipular mais de 200 formatos de aquivos matricial (raster) e vetorial. Tratando-se de uma biblioteca, a mesma apresenta um modelo de dados para abstração de arquivos raster e outra para arquivo vetorial, oferecendo uma série de comandos de linha (comandos via terminal) para processamento de dados. Ainda como se não fosse suficiente, possui API para diversas linguagens de programação como: C, C++, Python, Perl, R, C# and Java.</description>
    </item>
    
  </channel>
</rss>
